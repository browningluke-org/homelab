#!/bin/bash

# TODO:
#   - Make find channel id script
#   - Add support for images & escaped rich text

package="telegram-bot-cli"
version="v0.2"

bold=$(tput bold)
normal=$(tput sgr0)

TOKEN=""
CHANNEL=""
MESSAGE=0
FILE=0
INTERACTIVE=0
QUIET=0

print_usage() {
  printf "%s\n\n%s\n\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n" \
    "$bold$package$normal - send messages to a channel from a Telegram bot." \
    "$package [-ifqr] [-t bot_token] [-c channel_id] <msg/file>" \
    "options:" \
    "-i                        interactive mode, interactively find a channel id (WIP)" \
    "-f                        file, send a file. Expects a file path instead of a message" \
    "-q                        quiet, do not echo anything. Useful for scripts" \
    "-r                        raw, send plain text and do not use markdown" \
    "-t <bot_token>            token generated by botfather or another API server" \
    "-c <channel_id>           channel id of where to send the message to (DM or group)" \

}

# This function is unused (for now) vvv
# escapeString() {
#     echo "$1" |  sed -r 's/\./\\\\./g' |  sed -r 's/\#/\\\\#/g' |  sed -r 's/\-/\\\\-/g'
# }

getFullPath() {
    echo "$(cd "$(dirname "$1")"; pwd -P)/$(basename "$1")"
}

sendMessage() {
    unset RESPONSE
    if [ $QUIET -eq 0 ]; then printf "%s\n" "Sending $1 to $2, from $3"; fi

    echo "Data {\"chat_id\":\"$2\",\"text\":\"$1\"${RAWINPUT-",\"parse_mode\":\"MarkdownV2\"}"}}"

    #"$(escapeString "${MESSAGE}")" ### TODO: Add escaping for rich text

    RESPONSE=$(curl -s --header "Content-Type: application/json" \
    --data "{\"chat_id\":\"$2\",\"text\":\"$1\"${RAWINPUT-",\"parse_mode\":\"MarkdownV2\"}"}}" \
    https://api.telegram.org/bot$3/sendMessage)

    if [ $QUIET -eq 0 ]; then printf "%s\n" "$RESPONSE"; fi
}

sendFile() {
    unset RESPONSE
    if [ $QUIET -eq 0 ]; then printf "%s\n" "Sending file $1 to $2, from $3"; fi

    RESPONSE=$(curl -s -F "chat_id=$2" \
    -F document=@$1 \
    https://api.telegram.org/bot$3/sendDocument)

    if [ $QUIET -eq 0 ]; then printf "%s\n" "$RESPONSE"; fi
}

unset flag
unset RAWINPUT
while getopts 't:c:ifqr' flag; do
case "${flag}" in
    t) TOKEN="${OPTARG}" ;;
    c) CHANNEL="${OPTARG}" ;;
    i) INTERACTIVE=1 ;;
    f) FILE=1 ;;
    q) QUIET=1 ;;
    r) RAWINPUT="" ;;
    \?) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    :) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
    *) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
esac
done

if ((OPTIND == 1))
then
    print_usage
    exit 1
fi

if [[ -z $TOKEN ]]
then
    printf "ERROR: A bot token is required\n" >&2
    exit 1
fi

if [[ -z $CHANNEL ]] && [[ $INTERACTIVE -eq 0 ]]
then
    printf "ERROR: A channel id is required when not in interactive mode.\n" >&2
    exit 1
fi

# TODO: Make interactive mode

shift $(($OPTIND - 1))
MESSAGE=$1

if [ $FILE -eq 1 ]
then
    if [ -p /dev/stdin ]
    then 
        sendFile /dev/stdin $CHANNEL $TOKEN
    else
        if [[ ! -f $(getFullPath $MESSAGE) ]]
        then 
            printf "ERROR: A file must be specified.\n" >&2
            exit 1
        fi
        sendFile $(getFullPath $MESSAGE) $CHANNEL $TOKEN
    fi
else
    if [ -p /dev/stdin ]
    then
        unset MESSAGE
        MESSAGE=""
        
        while IFS= read line; do
            MESSAGE+="${line}\n"
        done
    fi

    if [[ -z $MESSAGE ]]
    then
        printf "ERROR: A message is required\n" >&2
        exit 1
    fi
    
    sendMessage "${MESSAGE}" $CHANNEL $TOKEN
fi
